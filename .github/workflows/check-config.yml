name: Check OIDC Config

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  exchange:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Request GitHub ID token and exchange for npm
        shell: bash
        run: |
          set -euo pipefail
          REG=$(npm --silent config get registry | tr -d '\n' | sed 's#/*$##')
          [ -n "${REG:-}" ] || REG="https://registry.npmjs.org"
          HOST=$(node -e 'try{console.log(new URL(process.argv[1]).hostname)}catch(e){process.exit(1)}' "$REG") || { echo "Failed to parse registry host"; exit 1; }
          ID_TOKEN=$(curl -sS -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=npm:${HOST}" | jq -r '.value')
          [ -n "${ID_TOKEN:-}" ] && [ "$ID_TOKEN" != "null" ] || { echo "Failed to retrieve GitHub ID token"; exit 1; }
          PKG_RAW=$(jq -r '.name' package.json)
          [ -n "${PKG_RAW:-}" ] && [ "$PKG_RAW" != "null" ] || { echo "Package name missing"; exit 1; }
          PKG=${PKG_RAW//@/%40}; PKG=${PKG//\//%2F}
          EX_URL="${REG}/-/npm/v1/oidc/token/exchange/package/${PKG}"
          RESP=$(curl -sS -w '\n%{http_code}' -X POST -H "Authorization: Bearer $ID_TOKEN" "$EX_URL" -d '')
          CODE=$(echo "$RESP" | tail -n1)
          BODY=$(echo "$RESP" | sed '$d')
            case "$CODE" in
              2*) : ;; # any 2xx is success
              *) echo "$BODY"; exit 1 ;;
            esac

